package framework.Interface;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.util.Arrays;

/*This is a shell for serializing objects for networks
 * 
 * 
 */
public class ObjectTransmitter {
	//input streams, used to rebuild objects from byte arrays
	private ByteArrayInputStream dataInputStream;
	private ObjectInputStream objectStream;
	
	//output streams used to turn objects into byte arrays
	private ByteArrayOutputStream dataOutputStream;
	private ObjectOutputStream objectOut;
	
	
	public boolean _COMPRESSION = false;
	//used for TCP only since persistent connection
	public boolean _TCP_HEADER = true;
	/***
	 * 
	 * HEADER DATA 3byte length, first 4 bits are objectID, other 20bits are length
	 * 
	 */
	public byte[] appendTCPHeader(byte[] data) 
	{
		byte[] bytes = new byte[3 + data.length];
		for (int i = 0; i < 3; i++) 
		{
		    bytes[i] = (byte)(data.length >>> (i * 8));
		}
		for (int x = 3; x < data.length + 3; x++)
		{
			bytes[x] = data[x-3];
		}
		System.out.println(Arrays.toString(bytes));
		return bytes;
	}
	public byte[] serializeObject(Object c) throws IOException
	{
		dataOutputStream = new ByteArrayOutputStream();
		objectOut = new ObjectOutputStream(dataOutputStream);
		objectOut.writeObject(c);
		byte[] serializedArray = dataOutputStream.toByteArray();
		objectOut.close();
		dataOutputStream.close();
		
		if(_COMPRESSION == true) 
			serializedArray = deltaCompress(serializedArray);
		
		return serializedArray;
	}
	//algorithims copied of wikipedia, need to verify
	public static byte[] deltaCompress(byte[] data)
	{
	    byte last = 0;
	    for (int i = 0; i < data.length; i++)
	    {
	    	byte current = data[i];
	    	data[i] = (byte) (data[i] - last);
	        last = current;
	    }
		return data;
	}
	public static byte[] deltaDecompress(byte[] data)
	{
		byte last = 0;
	    for (int i = 0; i < data.length; i++)
	    {
	    	data[i] = (byte) (data[i] + last);
	        last = data[i];
	    }
	    return data;
	}
	public void broadcast()
	{
		//implement later
	}
}
