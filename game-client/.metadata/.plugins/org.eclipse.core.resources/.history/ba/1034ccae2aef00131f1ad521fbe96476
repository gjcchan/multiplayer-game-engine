package Graphics;

import java.awt.Font;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.lwjgl.LWJGLException;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.DisplayMode;

import static org.lwjgl.opengl.GL11.*;

import org.lwjgl.opengl.*;
import org.lwjgl.*;
import org.lwjgl.input.Cursor;
import org.lwjgl.input.Keyboard;
import org.lwjgl.input.Mouse;
import org.newdawn.slick.Color;
import org.newdawn.slick.TrueTypeFont;
import org.newdawn.slick.opengl.Texture;
import org.newdawn.slick.opengl.TextureImpl;
import org.newdawn.slick.opengl.TextureLoader;

import sharedResources.globalShare;
import TileMap.TileMap;
import frameworkObjects.RepackagedPlayer;
import frameworkObjects.receiveData;
import frameworkObjects.sendData;



public class Renderer implements Runnable{

		private receiveData outPacket;
		private TileMap[] newMap;
		private Background[] background;
		
		private final static int gameWidth = 1024;
		private final static int gameHeight = 768;
		
		private final int Level1 = 0;
		
		//keeping track of camerad
		private int cameraX;
		private int cameraY;
		
		private int currentMap;
		private int currentStage;
		
		private int tileSizeLevel1 = 32;
		private int currentLevel = 0;
		
		//player's index
		public globalShare shared;
		
		//used for timing rendering time for most accurate interpolation
		public long renderTime;
		
		//keeps track of which is player
		public RepackagedPlayer clientPlayer;
		
		//used for setting fps
		private static final double simulationRate = 66.667; //10ms = factor of 50ms, works better  but hackish, need to fix down the road
		private static final int framerate = 60;
		private static int simulationRateMsec = (int)Math.round(1000 / simulationRate);
		
		//text rendering
		private TrueTypeFont font;
		
		public Renderer(receiveData newPacket, globalShare newShared)
		{
			shared = newShared;
			outPacket = newPacket;
			
			shared = newShared;		
			clientPlayer = null;			
		}
				
		//GL drawing functions
		private void drawQuadChecker(int x, int y, int width, int height)
		{
			if( (x+width > cameraX || x < cameraX+gameWidth) && (y+height > cameraY || y < cameraY+gameHeight))
					drawQuad(x-cameraX, y-cameraY, width, height);
		}
		private void drawTriangleChecker(int x, int y, int z, int x2, int y2, int z2)
		{
			if( (Math.min(x, Math.min(y, z)) >= cameraX || Math.max(x, Math.max(y, z)) <= cameraX+gameWidth) &&
				(Math.min(x2, Math.min(y2,  z2)) >= cameraY || Math.max(x2, Math.max(y2, z2)) <= cameraY + gameHeight))
				drawTriangle(x-cameraX, y-cameraX, z-cameraX, x2-cameraY,y2-cameraY,z2-cameraY);			
		}
		private void drawQuad(int x, int y, int width, int height)
		{
				glBegin(GL_QUADS);
					glTexCoord2f(0,0);	glVertex2i(x,y); //upperleft
					glTexCoord2f(1,0);	glVertex2i(x+width,y); //upperright	
					glTexCoord2f(1,1);	glVertex2i(x+width,y+height); //bottom-right
					glTexCoord2f(0,1);	glVertex2i(x,y+height); // bottom-left
				glEnd();					
		}
		private void drawTriangle(int x, int y, int z, int x2, int y2, int z2)
		{
			glBegin(GL_TRIANGLES);
				glVertex2i(x,x2); //upperleft
				glVertex2i(y,y2); //upperright			
				glVertex2i(z,z2); //bottom-right			
			glEnd();			
		}
		
		//game functions
		private void drawMap(TileMap map)
		{
			for(int y = 0; y < map.numRows; y++)
				for(int x = 0; x < map.numCols; x++)
					if(map.map[y][x] != 0)
					{
						if(map.getTile(map.map[y][x]).defaultTexture != null)
							glBindTexture(GL_TEXTURE_2D, map.getTile(map.map[y][x]).defaultTexture.getTextureID());
						glColor3f(1.0f, 1.0f, 1.0f);
						drawQuadChecker(x*map.tileSize, y*map.tileSize, map.tileSize, map.tileSize);	
						glBindTexture(GL_TEXTURE_2D, 0);
					}
		}
		private void drawPlayers(List<RepackagedPlayer> players)
		{
			//set color of other players  (useless when have textures)
			glColor3f(0.5f, 0.75f, 1.0f);	
			String username;
			for(RepackagedPlayer player : players)
			{
				synchronized(shared)
				{
					//check to see if it is client's player, if yes, then save for last
					if(player.playerIndex == shared.index)
					{
						clientPlayer = player;
					}
					else
					{
						// the -6 represents the display char width  - actual boundingBox >>2)
						drawQuadChecker((int)player.posX -6, 
								(int)player.posY, 
								tileSizeLevel1, 
								tileSizeLevel1);	
						
						drawTriangleChecker(
								(int)player.posX + 8, 
								(int)player.posX + 14, 
								(int)player.posX + 20,
								(int)player.posY - 16, 
								(int)player.posY - 4, 
								(int)player.posY - 16);
						TextureImpl.bindNone();
						//font.drawString((int)player.posX + 4 - cameraX, (int)player.posY - 32 - cameraY, "PLAYER " + player.playerIndex, Color.white);
						username = shared.playerNames.get(player.playerIndex);
						if(username == null || username.isEmpty())
							username = "<NO NAME>";
						font.drawString((int)player.posX + 4 - cameraX, (int)player.posY - 32 - cameraY, username, Color.white);
						TextureImpl.bindNone();
					}				
				}
			}
			//draw client's player
			if(clientPlayer != null)
			{	
				//set own player color polygon (useless when have textures)
				glColor3f(0.03f, 0.25f, 1.0f);	
				//why here???
				adjustCamera();	
				drawQuadChecker((int)clientPlayer.posX -6, 
						(int)clientPlayer.posY, 
						tileSizeLevel1, 
						tileSizeLevel1);
				
				drawTriangleChecker(
						(int)clientPlayer.posX + 8, 
						(int)clientPlayer.posX + 14, 
						(int)clientPlayer.posX + 20,
						(int)clientPlayer.posY - 16, 
						(int)clientPlayer.posY - 4, 
						(int)clientPlayer.posY - 16);
				TextureImpl.bindNone();
				font.drawString((int)clientPlayer.posX + 4 - cameraX, (int)clientPlayer.posY - 32 - cameraY, "YOU", Color.white);
			}	
		}
		
		private void drawBackground() 
		{
			//set to 1 for 1-1 pixel map, <1 for parallax
			final float tween = 0.5f;
			
			float leftX = (float)cameraX*tween / (float)background[currentLevel].image.getImageWidth();
			float topY = (float)cameraY*tween / (float)background[currentLevel].image.getImageHeight();
			float rightX = ((float)(cameraX*tween)+(float)gameWidth) / (float)background[currentLevel].image.getImageWidth();
			float bottomY = ((float)(cameraY*tween)+(float)(gameHeight)) / (float)background[currentLevel].image.getImageHeight();

			//dividing Y X by 1.8 because it doesnt scale properly for some reason (not 1-to-1 pixel mapped)
			//perhaps it doesnt like non base 2 square dimensions? use hack code to fix for now
			glColor3f(1.0f, 1.0f, 1.0f);
			glBindTexture(GL_TEXTURE_2D, background[currentLevel].image.getTextureID());
			glBegin(GL_QUADS);
				glTexCoord2f(leftX/1.5f, topY/1.07f);		glVertex2i(0,0); //upperleft
				glTexCoord2f(rightX/1.5f,topY/1.07f);		glVertex2i(gameWidth,0); //upperright	
				glTexCoord2f(rightX/1.5f,bottomY/1.07f);	glVertex2i(gameWidth,gameHeight); //bottom-right
				glTexCoord2f(leftX/1.5f, bottomY/1.07f);	glVertex2i(0,gameHeight); // bottom-left
			glEnd();
			
			//unbind texture
			glBindTexture(GL_TEXTURE_2D, 0);
		}
		private void drawForeground()
		{
			
		}
		//run ? times between packets (but have packet sync issue)
		private void interpolateMovement()
		{
			//long startTimer = System.nanoTime();
			if(shared.previousState != null)
			{
				//for(int x = 0; x < shared.previousState.playerList.size(); x++)
				//not the best method since it can cause glitches on slow machines
				for(int x = 0; x < Math.min(shared.previousState.playerList.size(), shared.UDPstate.playerList.size()); x++)
				{
					try {
						synchronized(shared)
						{					
							//remember to subtract old from new to get calc
							shared.previousState.playerList.get(x).posX = shared.previousState.playerList.get(x).posX 
									+ ( (shared.UDPstate.playerList.get(x).posX - shared.previousState.playerList.get(x).posX) / (shared.betweenState / simulationRateMsec)); //the -2 makes it more even in movement
							shared.previousState.playerList.get(x).posY = shared.previousState.playerList.get(x).posY 
									+ ( (shared.UDPstate.playerList.get(x).posY - shared.previousState.playerList.get(x).posY) / (shared.betweenState / simulationRateMsec));
							//System.out.println(shared.previousState.playerList.get(x).posX + " + (" + shared.UDPstate.playerList.get(x).posX + " - " + shared.previousState.playerList.get(x).posX +" / ( " + shared.betweenState + " / " + simulationRateMsec + " ))");
						}
					}catch(NullPointerException nex) {
						System.out.println("null issue on interpolation on index: " + x);
						System.out.println("ARRAY SIZES : PREVIOUS=" + shared.previousState.playerList.size() + " CURRENT=" + shared.UDPstate.playerList.size() );
						break;
					} catch(IndexOutOfBoundsException iex) {
						System.out.println("out of bounds exception:");
						System.out.println("INDEX : " + x + " Max range size: " + Math.min(shared.previousState.playerList.size(), shared.UDPstate.playerList.size()) );
						System.out.println("ARRAY SIZES : PREVIOUS=" + shared.previousState.playerList.size() + " CURRENT=" + shared.UDPstate.playerList.size() );
					}
				}
			}
			//renderTime = System.nanoTime() - startTimer;
		}
		//used to sync players between snapshots, otherwise, it people leaving and joining will get the index mixed up
		private void syncPlayerLists()
		{
			synchronized(shared) {
				if(shared.previousState != null && shared.UDPstate != null)
				{
					try {
						ArrayList<RepackagedPlayer> newList = new ArrayList<RepackagedPlayer>();
						ArrayList<RepackagedPlayer> missingPlayers = new ArrayList<RepackagedPlayer>();
						int currentIndex;
						for(int x = 0; x < shared.previousState.playerList.size(); x++)
						{
							currentIndex = shared.previousState.playerList.get(x).playerIndex;
							//searches for the object in currentState that matches the previousState in the array
							for(int y = 0; y < shared.UDPstate.playerList.size(); y++)
							{
								if(shared.UDPstate.playerList.get(y).playerIndex == currentIndex)
								{
									//append to new array, and dump it from old array
									newList.add(shared.UDPstate.playerList.get(y));
									shared.UDPstate.playerList.remove(y);
									break;
								}
								missingPlayers.add(shared.previousState.playerList.get(x));
							}
						}
						for(RepackagedPlayer x : missingPlayers)
						{
							shared.previousState.playerList.remove(x);
						}
						//player has been added
						if(shared.UDPstate.playerList.size() > 0)
						{
							for(RepackagedPlayer x : shared.UDPstate.playerList)
							{
								shared.previousState.playerList.add(x);
								newList.add(x);
							}
						}
						shared.UDPstate.playerList = newList;		
					}catch(NullPointerException nex) {
						System.out.println("null issue on syncPlayerList()");
						System.out.println("ARRAY SIZES : PREVIOUS=" + shared.previousState.playerList.size() + " CURRENT=" + shared.UDPstate.playerList.size() );
						nex.printStackTrace();
					} catch(IndexOutOfBoundsException iex) {
						System.out.println("syncPlayerList(): out of bounds exception:");
						System.out.println("ARRAY SIZES : PREVIOUS=" + shared.previousState.playerList.size() + " CURRENT=" + shared.UDPstate.playerList.size() );
						iex.printStackTrace();
					}
				}
			}
		}
		private void adjustCamera()
		{
			if(clientPlayer != null)
			{
				
				//should be able to handle dropped packets
				//for x
				if(clientPlayer.posX + 30 > (cameraX + gameWidth-100))
					cameraX += (clientPlayer.posX + 30 - (cameraX + gameWidth - 100));
				else if(clientPlayer.posX < (cameraX + 100))
					cameraX -= (cameraX + (100 - clientPlayer.posX));
				//for y
				if(clientPlayer.posY + 30  > (cameraY + gameHeight-100))
					cameraY += (clientPlayer.posY - (cameraY + gameHeight - 100));
				else if(clientPlayer.posY + 30 < (cameraY + 100))
					cameraY -= (cameraY + (100 - clientPlayer.posY));
				
				//fix bounds
				if(cameraX + gameWidth > newMap[currentLevel].getWidth())
					cameraX = newMap[currentLevel].getWidth() - gameWidth;
				else if(cameraX < 0)
					cameraX = 0;
				
				if(cameraY + gameHeight > newMap[currentLevel].getHeight())
					cameraY = newMap[currentLevel].getHeight() - gameHeight;
				else if(cameraY < 0)
					cameraY = 0;
			}
		}
		private void initializeGameData()
		{
			//load text font
			font = new TrueTypeFont(new Font("Arial", Font.BOLD, 12), false);
			
			newMap = new TileMap[1];
			background = new Background[1];
			//load map tiles
			newMap[Level1] = new TileMap(tileSizeLevel1);
			newMap[Level1].loadMap("/Maps/testmap.map");
			//load level backgrounds
			background[Level1] = new Background();
			background[Level1].loadImage("/Backgrounds/testmap.png");
			glBindTexture(GL_TEXTURE_2D, 0);
		}
		public void run() 
		{
			Cursor customCursor = null;
			try{
				//set sync rate
				//Display.setVSyncEnabled(true);
				//set resolution
				Display.setDisplayMode(new DisplayMode(gameWidth, gameHeight));
				Display.create();
				initializeGameData();
				//creates a blank cursor so you can use custom cursor in game
				customCursor = new Cursor(1, 1, 0, 0, 1, BufferUtils.createIntBuffer(1), null);
				Mouse.setNativeCursor(customCursor);
			} catch (LWJGLException e) {
				e.printStackTrace();
			} 
						
			//init code for OpenGL
			//set to matrix mode for gl projection
			glMatrixMode(GL_PROJECTION);
			glLoadIdentity();
			//set perspective
			boolean keyPressed = false;
			boolean lastKeyPressed = false;
			// set upper left to (x=0,y=0), bottom right to (640, 480)
			//glOrtho(Xbegin-leftside, Xend-rightside, Ybegin-bottom, Yend-top, 3d param[set 1 for 2d], 3d param [set -1 for 2d])
			//ie if 640 width cube, (0, 640, 640,0, 640, 0) etc
			glOrtho(0,gameWidth, gameHeight,0, 1, -1);
			glMatrixMode(GL_MODELVIEW);
			//enable textures
			glEnable(GL_TEXTURE_2D);
			//enable transparency --enable, draw, then disable
			glEnable(GL_BLEND);			
			glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
			
			// setup GLfont TTFs are slow but scales, use bitmap instead
			//font = new TrueTypeFont(new Font("Times New Roman", Font.BOLD, 16), true); 
			//set counter for fps sleep
			long start;
			
			//render loop
			while(!Display.isCloseRequested())
			{
				//log beginning timer
				start = System.nanoTime();
				
				outPacket.keyLeft = false;
				outPacket.keyRight = false;
				outPacket.keyUp = false;
				keyPressed = false;
				//clear screen (buffer_bit is 2d only)
				glClear(GL_COLOR_BUFFER_BIT);
				//bind texture to glTexCoord
				//testTexture.bind();
				
				//set color of drawing -uses floats
				//glColor3f(colorRed, colorGreen, colorBlue);
				drawBackground();
				//System.out.println(cameraX + " , " + cameraY);
				
				//adjustCamera();		//look for it in draw players instead, incoming packet must have messed with it	
				
				glColor3f(0.03f, 0.25f, 0.01f);
				drawMap(newMap[0]);
				//glColor3f(0.03f, 0.25f, 1.0f);	
				syncPlayerLists();
				interpolateMovement();
				drawPlayers(shared.previousState.playerList);
				//drawForeground();
				
				//key event listener
				if(Keyboard.isKeyDown(Keyboard.KEY_ESCAPE) || Display.isCloseRequested())
				{
					Display.destroy();
					System.exit(0);
				}
				synchronized(outPacket)
				{
					if(Keyboard.isKeyDown(Keyboard.KEY_A) && !Keyboard.isKeyDown(Keyboard.KEY_D))
					{
						outPacket.keyLeft = true;	
						keyPressed = true;
					}				
					if(Keyboard.isKeyDown(Keyboard.KEY_D) && !Keyboard.isKeyDown(Keyboard.KEY_A))
					{
						outPacket.keyRight = true;	
						keyPressed = true;
					}		
					if(Keyboard.isKeyDown(Keyboard.KEY_SPACE))
					{
						outPacket.keyUp = true;	
						keyPressed = true;
					}
					if(keyPressed)
					{
						outPacket.notify();
						lastKeyPressed = true;
					}
					else if(lastKeyPressed)
						outPacket.notify();
				}
				//test example of using mouse in game
				glColor3f(0.05f, 0.4f, 0.5f);
				glBindTexture(GL_TEXTURE_2D, 0);
				drawQuad(Mouse.getX(),gameHeight - Mouse.getY(), 5, 5);
				
				Display.update();	
				//Display.sync(framerate);
				//sleep for fps rate
				
				
				try {
					Thread.sleep(simulationRateMsec - (System.nanoTime() - start) / 1000000);
					//speeding up cpu when have the chance
					if(simulationRateMsec > 10)
						simulationRateMsec--;	
				} catch (InterruptedException e) {
					System.out.println("RENDER THREAD: no time to sleep: wait < 0");
				} catch(IllegalArgumentException ex) {
					System.out.println("RENDER THREAD: cpu too slow, slowing down simulation");	
					simulationRateMsec++;
				}	
				
			}
			//close display window
			Display.destroy();	
			System.exit(0);
		}
}
