package corelogic;

import java.util.List;
import java.util.Queue;

import framework.gameInputObject;
import gameLevels.GameStage;
import gameObjects.GameStateObject;

/*
 * create separate thread for broadcast timer
 */
public class GameState implements Runnable {
	//gamestate object for broadcast
	private GameStateObject currentState;
	
	//all the incoming data to update the new inputs
	private Queue<gameInputObject> toDoList;
	
	//place to hold tileMaps and levels
	private List<GameStage> stages;
	private int currentStage;
	
	//place to hold all IPs used
	private List<String> playerIP;
	
	//allows you to pause the server
	private boolean run;
	
	public GameState(Queue<gameInputObject> input, GameStateObject inputState)
	{
		toDoList = input;
		currentState = inputState;
		initialize();
	}
	@Override
	public void run() 
	{
		run = true;
		while(run)
		{
			processLogic(toDoList.poll());
		}		
	}
	
	//Initialize the whole game
	private void initialize()
	{
		currentStage = 0;
		currentState.setStage(stages.get(currentStage));
		currentState.clearState();	
	}
	
	//where all the logic occurs
	private void processLogic(gameInputObject input)
	{	
		//need to implement something to check if player already exist or should it spawn one
		
		//key conditionals
		if(input.keyUp)
		{}
		if(input.keyDown)
		{}
		if(input.keyLeft)
		{}
		if(input.keyRight)
		{}
		if(input.jumpKey)
		{}
		if(input.fire)
		{}
	}

	
}
